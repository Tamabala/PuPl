function EYE = trimgaze(EYE, varargin)

p = inputParser;
addParameter(p, 'lims', [])
parse(p, varargin{:});

if isempty(p.Results.lims)
    lims = UI_getgazelims(EYE);
    if isempty(lims)
        EYE = [];
        return
    end
else
    lims = p.Results.lims;
end

callStr = sprintf('eyeData = %s(eyeData, ''lims'', %s)', mfilename, all2str(lims));

% Convert string to numerical limits
lims = [
    strlim2numlim(lims{1}, EYE.gaze.x, 'Lower')
    strlim2numlim(lims{2}, EYE.gaze.x, 'Upper')
    strlim2numlim(lims{3}, EYE.gaze.y, 'Lower')
    strlim2numlim(lims{4}, EYE.gaze.y, 'Upper')
];

fprintf('Trimming extreme gaze values...\n')
fprintf('Trimming points where:\n')
fprintf('x < %0.1f\n', lims(1))
fprintf('x > %0.1f\n', lims(2))
fprintf('y < %0.1f\n', lims(3))
fprintf('y > %0.1f\n', lims(4))
for dataIdx = 1:numel(EYE)
    badIdx = EYE(dataIdx).gaze.x < lims(1) |...
        EYE(dataIdx).gaze.x > lims(2) |...
        EYE(dataIdx).gaze.y < lims(3) |...
        EYE(dataIdx).gaze.y > lims(4);
    for field1 = {'gaze' 'diam'} 
        for field2 = reshape(fieldnames(EYE(dataIdx).(field1{:})), 1, [])
            EYE(dataIdx).(field1{:}).(field2{:})(badIdx) = nan; 
        end
    end
    fprintf('\t%s: %0.2f%% of data removed\n', EYE(dataIdx).name, 100*nnz(badIdx)/numel(EYE(dataIdx).isBlink))
    EYE(dataIdx).history = cat(1, EYE(dataIdx).history, callStr);
end
fprintf('done\n')

end

function lims = UI_getgazelims(EYE)

x = mergefields(EYE, 'gaze', 'x');
y = mergefields(EYE, 'gaze', 'y');

f = figure(...
    'ToolBar', 'none',...
    'MenuBar', 'none',...
    'UserData', struct(...
        'lims', [min(x) max(x) min(y) max(y)],...
        'x', x,...
        'y', y));
p1 = uipanel(f,...
    'Tag', 'plotpanel',...
    'Units', 'normalized',...
    'Position', [0.01 0.11 0.98 0.88]);
ax = axes(p1,...
    'Tag', 'middlescatter',...
    'NextPlot', 'add',...
    'Units', 'normalized',...
    'Position', [0.21 0.21 0.78 0.78]);
axes(p1,...
    'Tag', 'bottomhist',...
    'NextPlot', 'add',...
    'Units', 'normalized',...
    'Position', [0.21 0.06 0.78 0.13]);
axes(p1,...
    'Tag', 'lefthist',...
    'NextPlot', 'add',...
    'Units', 'normalized',...
    'Position', [0.06 0.21 0.13 0.78]);
uicontrol(p1,...
    'Style', 'text',...
    'FontSize', 10,...
    'Tag', 'reporttext',...
    'String', '0%% trimmed',...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.18 0.13]);
axes(ax);
scatter(x, y);
xlimits = xlim;
ylimits = ylim;
f.UserData.lims = [xlimits ylimits];

p = uipanel(f,...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.48 0.08]);
uicontrol(p,...
    'Style', 'edit',...
    'Tag', 'xLower',...
    'Callback', @(h,e) updateplot,...
    'String', 'x lower cutoff',...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.24 0.98]);
uicontrol(p,...
    'Style', 'edit',...
    'Tag', 'xUpper',...
    'Callback', @(h,e) updateplot,...
    'String', 'x upper cutoff',...
    'Units', 'normalized',...
    'Position', [0.26 0.01 0.24 0.98]);
uicontrol(p,...
    'Style', 'edit',...
    'Tag', 'yLower',...
    'Callback', @(h,e) updateplot,...
    'String', 'y lower cutoff',...
    'Units', 'normalized',...
    'Position', [0.51 0.01 0.24 0.98]);
uicontrol(p,...
    'Style', 'edit',...
    'Tag', 'yUpper',...
    'Callback', @(h,e) updateplot,...
    'String', 'y upper cutoff',...
    'Units', 'normalized',...
    'Position', [0.76 0.01 0.24 0.98]);
p = uipanel(f,...
    'Units', 'normalized',...
    'Position', [0.51 0.01 0.48 0.08]);
uicontrol(p,...
    'String', 'Done',...
    'Units', 'normalized',...
    'Callback', @(h,e) uiresume(f),...
    'KeyPressFcn', @(h,e) enterdo(e, @() uiresume(f)),...
    'Position', [0.01 0.01 0.48 0.98]);
uicontrol(p,...
    'String', 'Cancel',...
    'Units', 'normalized',...
    'Callback', @(h,e) delete(f),...
    'KeyPressFcn', @(h,e) enterdo(e, @() delete(f)),...
    'Position', [0.51 0.01 0.48 0.98]);
    
updateplot(f);

uiwait(f);

if isvalid(f)
    [~, lims{1}] = getlim(f, 'x', 'Lower');
    [~, lims{2}] = getlim(f, 'x', 'Upper');
    [~, lims{3}] = getlim(f, 'y', 'Lower');
    [~, lims{4}] = getlim(f, 'y', 'Upper');
    close(f);
else
    lims = [];
end

end

function updateplot(varargin)

if ~isempty(varargin)
    f = varargin{cellfun(@isgraphics, varargin)};
else
    f = gcbf;
end

badIdx = struct(...
    'x', false(size(f.UserData.x)),...
    'y', false(size(f.UserData.y)));

for side = {'x' 'y'}
    for limType = {'Lower' 'Upper'}
        currLim = getlim(f, side, limType);
        if strcmp(limType, 'Lower')
            badIdx.(side{:}) = badIdx.(side{:}) | f.UserData.(side{:}) < currLim;
        else
            badIdx.(side{:}) = badIdx.(side{:}) | f.UserData.(side{:}) > currLim;
        end
    end
end

x = f.UserData.x;
y = f.UserData.y;

badIdx.both = badIdx.x | badIdx.y;

axes(findobj(f, 'Type', 'axes', 'Tag', 'middlescatter'));
cla;
scatter(x(~badIdx.both), y(~badIdx.both), 5, 'k', 'filled',...
    'MarkerFaceAlpha', 0.1,...
    'MarkerEdgeAlpha', 0.1)
scatter(x(badIdx.both), y(badIdx.both), 5, 'r', 'filled',...
    'MarkerFaceAlpha', 0.1,...
    'MarkerEdgeAlpha', 0.1)
xlimits = xlim;
ylimits = ylim;
xticks('');
yticks('');
axes(findobj(f, 'Tag', 'bottomhist'));
cla
hist(x, xlimits(2) - xlimits(1))
xlim(xlimits);
yticks('');
axes(findobj(f, 'Tag', 'lefthist'));
cla
hist(y, ylimits(2) - ylimits(1))
xlim(ylimits)
yticks('');
set(gca,'view',[90 -90])

set(findobj(f, 'Tag', 'reporttext'), 'String', sprintf('%0.2f%% trimmed', 100*nnz(badIdx.both)/numel(badIdx.both)));

end

function [currLim, currStr] = getlim(f, side, limType)

side = cellstr(side);
limType = cellstr(limType);
currStr = get(findobj(f, 'Tag', [side{:} limType{:}]), 'String');
currLim = strlim2numlim(currStr, f.UserData.(side{:}), limType);

end