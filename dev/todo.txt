Final to-do list

Curr version: 0.9
0.9.1: Handling reaction times
	DONE - Make tsv2eventlog convert 'n/a' to NaN
	DONE - Add option to reject trials by reaction time
    DONE - Delete rejectbyextremediam
	DONE - Add option to view heatmap of trials sorted by reaction time-ask Dr Watter
	DONE - Write reaction time info to stats sheet-ask Dr Watter
0.9.2: Handling raw data readers
	DONE - Replace Tobii Excel with Tobii tsv
        Not replaced, but added
    DONE - Make xdf reader Octave-compatible
        init.m just needs to compile load_xdf_innerloop.c for Octave
        not working--do I need to specify that it's a C file?
        load_xdf uses plain Matlab if the mex file isn't there
    DONE - Make edf reader Octave-compatible
        read ascii rather than raw edf (or maybe add edf reader once I understand the ascii)
        written in Matlab--VERY SLOW. Needs to be done in C at some point
        Redone in Matlab to be faster
    SCRAPPED - Write C code for reading ascii from EDF
0.9.3: Odds and ends
	DONE - Add scrollbar to interface
	DONE - Add tool for rejecting trials on the basis of bad baselines (by missing data)
		DONE - Integrate this with trial rejection tools
	DONE - Add option to reload raw data from src
	SCRAPPED - Create tool for writing and reading participants.tsv
		unique(mergefields(EYE, 'BIDS', 'sub'));
		how to deal with additional info? How to add additional info?
	DONE - If multiple datasets are passed into trimdiam, reset the average of each stream to the grand average of all streams
	DONE - Write cond field to stats sheet
		Where should the functionality to add a condition be put? Maybe just last under trials
	DONE - Add tool for marking error trials
		Combining conditions the normal way
		Something like regular expressions but with time
		markerrortrials(eyeData, 'centralevents', {'event1' 'event2'},  'lims', {'0s' '5s'})
		Hierarchical:
			definehigherorderevents:
				name: ''
				time-locking events: {'' ''}
				time lims: {str str}
				presence or absence
				events to check: {'' ''}
	DONE - Add tool for calculating reaction times
		calcrts(eyeData, 'onsets', {'trialType1' 'trialType2'}, 'responses', {'response'})
	SCRAPPED - Create merged datasets using UI_getsets
		Find unique trial set descriptions (names?), then extract trial sets from merged data
    DONE - Decide what data loaders should print
        What are the layers?
            Lowest: loadfunc (take fullpath, return struct) - print nothing
            Next: dataloader.m (take loadfunc, fullpath, return struct) - print nothing
            Next: sub_*.m (take loadfunc, fullpath, return struct) - print "Loading %s...done"
            Next: pupl_*.m - print "\n" and whatever other pretty wrapper is needed
    DONE - call strsplit something else
    DONE - Add tool to plot grand average on the basis of conditions
    DONE - Fix stats writing to account for multiple conditions
        cond1 & cond2 columns? 
        for now, just strcat cond names together
    DONE - Make stats computible for multiple windows per trial
        E.g. define window--which stats to compute for this window?
            If window empty, use entire trial
            name of window
            mean, median, max, min
    DONE - Add option to include rejected trials
        Rejected trials are printed to stats sheet and marked
    DONE - If eyeData is empty, make it struct([])
    DONE - Include n. trials in plot trial sets
    DONE - Fix xdf reader
    Finish Contibuting section of manual
	Alter presentation event log readers to read reaction times
    Add tool for geometric PFE correction
    Make sure the code doesn't break on monocular recordings
    Add tool for re-mapping sourcedata to raw (in case folders are transferred between computers)
    Add option to export binned/downsampled data
        "Add option to print raw trial data" is a special case of this
        Start time and step size would need to be specified.
        How would you get just one datapoint per column?
            Window width of 0 is the answer
        Column names?
            [n/p]<winstart>ms_[n/p]<winend>ms_Mean <- How to avoid decimal points in column names?
            [n/p]<winstart>dp_[n/p]<winend>dp_Mean <- Better
        How to define when steps start and end?
            Option 1: define n. steps
            Option 2: define end time
                What if end time doesn't line up with last window end?
                    Make that one the last window
0.9.4: Renaming files
	Add the same prefix (e.g. pupl_) to all files called by the user interface
	Add the same prefic (e.g. sub_) to all files called by the aforementioned
0.9.5: Thorough testing
	Create dummy eye data for testing and test it using Octave in traditional mode
		Continuous data begins as a flat line at 100
		Pre-experiment baseline: flat line at 25 for 10 seconds
		Pre-trial block baseline: flat line at 50 for 5 seconds
		Gaze is random within [-250 250] x [-150 150]
		Pupil diameter is linear in gaze y, quadratic in gaze x
		Trials of one type should be a sine wave, of another should be a negative sine wave
		An external event log with a constant time offset should also exist
		10% of data should have 50% missing data, another 30% should have 10% missing data
1: released

