function EYE = trimdiam(EYE, varargin)

p = inputParser;
addParameter(p, 'leftLims', [])
addParameter(p, 'rightLims', [])
parse(p, varargin{:});

if isempty(p.Results.leftLims) || isempty(p.Results.rightLims)
    [leftLims, rightLims] = UI_getdiamlims(EYE);
    if isempty(leftLims)
        EYE = [];
        return
    end
else
    leftLims = p.Results.leftLims;
    rightLims = p.Results.rightLims;
end

fprintf('Trimming extreme pupil diameter values...\n')
for dataIdx = 1:numel(EYE)
    badIdx = EYE(dataIdx).data.left < leftLims(1) |...
        EYE(dataIdx).data.left > leftLims(2) |...
        EYE(dataIdx).data.right < rightLims(1) |...
        EYE(dataIdx).data.right > rightLims(2);
    for field1 = {'gaze' 'data'} 
        for field2 = reshape(fieldnames(EYE(dataIdx).(field1{:})), 1, [])
            EYE(dataIdx).(field1{:}).(field2{:})(badIdx) = nan; 
        end
    end
    fprintf('\t%s: %0.2f%% of data removed\n', EYE(dataIdx).name, 100*nnz(badIdx)/numel(badIdx))
end

end

function [leftLims, rightLims] = UI_getdiamlims(EYE)

left = mergefields(EYE, 'data', 'left');
right = mergefields(EYE, 'data', 'right');

f = figure(...
    'ToolBar', 'none',...
    'MenuBar', 'none',...
    'UserData', struct(...
        'left', left,...
        'right', right,...
        'leftLims', [min(left) max(left)],...
        'rightLims', [min(right) max(right)]));
p1 = uipanel(f,...
    'Tag', 'plotpanel',...
    'Units', 'normalized',...
    'Position', [0.01 0.11 0.98 0.88]);
axes(p1,...
    'Tag', 'hist',...
    'NextPlot', 'add');

p = uipanel(f,...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.98 0.08]);
uicontrol(p,...
    'Style', 'edit',...
    'Tag', 'leftLims',...
    'String', num2str(f.UserData.leftLims),...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.18 0.98]);
uicontrol(p,...
    'Style', 'edit',...
    'Tag', 'rightLims',...
    'String', num2str(f.UserData.rightLims),...
    'Units', 'normalized',...
    'Position', [0.21 0.01 0.18 0.98]);
uicontrol(p,...
    'String', 'Update',...
    'Units', 'normalized',...
    'Callback', @(h,e) updateplot,...
    'Position', [0.41 0.01 0.18 0.98]);
uicontrol(p,...
    'String', 'Done',...
    'Units', 'normalized',...
    'Callback', @(h,e) uiresume(f),...
    'Position', [0.61 0.01 0.18 0.98]);
uicontrol(p,...
    'String', 'Cancel',...
    'Units', 'normalized',...
    'Callback', @(h,e) delete(f),...
    'Position', [0.81 0.01 0.18 0.98]);
    
updateplot(f);

uiwait(f);

if isvalid(f)
    leftLims = str2num(get(findobj(f, 'Tag', 'leftLims'), 'String'));
    rightLims = str2num(get(findobj(f, 'Tag', 'rightLims'), 'String'));
    close(f);
else
    [leftLims, rightLims] = deal([]);
end

end

function updateplot(varargin)

if ~isempty(varargin)
    f = varargin{cellfun(@isgraphics, varargin)};
else
    f = gcbf;
end

leftLims = str2num(get(findobj(f, 'Tag', 'leftLims'), 'String'));
rightLims = str2num(get(findobj(f, 'Tag', 'rightLims'), 'String'));
left = f.UserData.left;
right = f.UserData.right;

badLeftIdx = left < leftLims(1) |...
        left > leftLims(2);
badRightIdx = right < rightLims(1) |...
        right > rightLims(2);
badIdx = badLeftIdx | badRightIdx;
axes(findobj(f, 'Type', 'axes', 'Tag', 'hist'));
cla;
bins = linspace(min([left right]), max([left right]), 200);
histogram(left(~badLeftIdx), bins);
histogram(right(~badRightIdx), bins);
histogram(left(badLeftIdx), bins, 'FaceColor', 'k')
histogram(right(badRightIdx), bins, 'FaceColor', 'k')
legend({'Left' 'Right' 'Trimmed'})
xlabel('Diameter')

title(sprintf('%0.2f%% trimmed', 100*nnz(badIdx)/numel(badIdx)))

set(findobj(f, 'Tag', 'reporttext'), 'String', sprintf('%0.2f%% trimmed', 100*nnz(badIdx)/numel(badIdx)));

end