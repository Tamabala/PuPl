function pupl_UI

global eyeData eventLogs activeIdx userInterface activePanel

userInterface = figure('Name', 'Pupillometry',...
    'NumberTitle', 'off',...
    'UserData', struct(...
        'activeIdx', []),...
    'MenuBar', 'none',...
    'ToolBar', 'none');

% Active datasets
activePanel = uibuttongroup('Title', 'Active datasets',...
    'Position',[0.01 0.01 .3 0.95]);

% Info on datasets, event logs, processing history

% Data menu
fileMenu = uimenu(userInterface,...
    'Tag', 'fileMenu',...
    'Text', '&Data');
uimenu(fileMenu,...
    'Text', '&Import',...
    'MenuSelectedFcn', @(h, e)...
        globalHelper(pupl_format('type', 'eye data'), 'append'));
uimenu(fileMenu,...
    'Text', '&Load',...
    'MenuSelectedFcn', @(h, e)...
        globalHelper(pupl_load('type', 'eye data'), 'append'));
uimenu(fileMenu,...
    'Text', '&Save',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_save('type', 'eye data', 'data', eyeData(activeIdx))));
%{
        uimenu(fileMenu,...
    'Text', '&Remove active datasets',...
    'MenuSelectedFcn', ?);
%}

% Processing menu
processingMenu = uimenu(userInterface, 'Text', '&Process');
uimenu(processingMenu,...
    'Text', '&Moving average filter',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(eyefilter(eyeData(activeIdx))));
uimenu(processingMenu,...
    'Text', '&Interpolate',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(interpeyedata(eyeData(activeIdx))));
uimenu(processingMenu,...
    'Text', '&Merge left and right streams',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(mergelr(eyeData(activeIdx))));

% Epoching menu
trialsMenu = uimenu(userInterface,...
    'Text', '&Trials');
uimenu(trialsMenu,...
    'Text', '&Separate into trials',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(epoch(eyeData(activeIdx))));
uimenu(trialsMenu,...
    'Text', '&Merge trials',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(binepochs(eyeData(activeIdx))));
% Event logs sub-menu
eventLogsMenu = uimenu(trialsMenu,...
    'Text', '&Event logs');
uimenu(eventLogsMenu,...
    'Text', '&Write to eye data',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(attachevents(eyeData(activeIdx), 'eventLogs', eventLogs)));
uimenu(eventLogsMenu,...
    'Text', '&Import',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_format('type', 'event logs')));
uimenu(eventLogsMenu,...
    'Text', '&Load',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_load('type', 'event logs')));
uimenu(eventLogsMenu,...
    'Text', '&Save',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_save('type', 'eye data', 'data', eventLogs)));

% Experiment menu
experimentMenu = uimenu(userInterface,...
    'Text', '&Experiment');
uimenu(experimentMenu,...
    'Text', '&Assign datasets to conditions',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_condition(eyeData(activeIdx))));
uimenu(experimentMenu,...
    'Text', '&Merge conditions',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_merge(eyeData(activeIdx))));

% Plotting menu
plottingMenu = uimenu(userInterface,...
    'Text', '&Plot');
uimenu(plottingMenu,...
    'Text', '&Plot',...
    'MenuSelectedFcn', @(src, event)...
        pupl_plot(eyeData(activeIdx)));

% Spreadsheet menu
spreadSheetMenu = uimenu(userInterface,...
    'Text', '&Spreadsheet');
uimenu(spreadSheetMenu,...
    'Text', '&Write eye data to spreadsheet',...
    'MenuSelectedFcn', @(src, event)...
        writetospreadsheet(eyeData(activeIdx)));

end

function globalHelper(in, varargin)

if ~isempty(in)
    if strcmp(in.type, 'eye data')
        global eyeData activeIdx
        if ~isempty(eyeData)
            % Create empty fields if necessary so that structs can still be in an array
            eyeData = fieldconsistency(eyeData, in);
            if any(strcmpi(varargin, 'append'))
                eyeData = [eyeData in];
            else
                eyeData(activeIdx) = in;
            end
        else
            eyeData = in;
        end
    elseif strcmp(in.type, 'event logs')
        global eventLogs
        eventLogs = in;
    end
end

update_UI

end

function update_UI

% For when new data is loaded or the active datasets change

global userInterface activePanel activeIdx eyeData 

if numel(eyeData) > numel(activeIdx)
    delete(activePanel.Children)
    activeIdx(numel(activeIdx)+1:numel(eyeData)) = true;
    sep = 2;
    buttonHeight = 20;
    bgPos = getpixelposition(activePanel);
    top = bgPos(4) - buttonHeight;
    buttonWidth = bgPos(3) - sep;
    for i = 1:numel(eyeData)
        if activeIdx(i)
            value = 1;
        else
            value = 0;
        end
        uicontrol(activePanel,...
            'Style', 'checkbox',...
            'Position', [sep, top - (buttonHeight+sep)*i, buttonWidth, buttonHeight],...
            'String', eyeData(i).name,...
            'Value', value,...
            'Callback', @(h, e) update_UI);
    end    
end

for i = 1:numel(activePanel.Children)
    if activePanel.Children(i).Value == 1
        activeIdx(i) = true;
    else
        activeIdx(i) = false;
    end
end

userInterface.Visible = 'off';
userInterface.Visible = 'on';

end