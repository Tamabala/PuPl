function pupl_UI

global userInterface activeEyeDataPanel activeEventLogsPanel

userInterface = figure('Name', 'Pupillometry',...
    'NumberTitle', 'off',...
    'UserData', struct(...
        'n', 0),...
    'MenuBar', 'none',...
    'ToolBar', 'none');

% Active datasets
activeEyeDataPanel = uibuttongroup('Title', 'Active datasets',...
    'Position',[0.01 0.01 .48 0.95],...
    'FontSize', 10);
activeEventLogsPanel = uibuttongroup('Title', 'Active event logs',...
    'Position',[0.51 0.01 .48 0.95],...
    'FontSize', 10);

% Info on datasets, event logs, processing history

% Data menu
fileMenu = uimenu(userInterface,...
    'Tag', 'fileMenu',...
    'Text', '&Data');
uimenu(fileMenu,...
    'Text', '&Import',...
    'MenuSelectedFcn', @(h, e)...
        globalHelper(pupl_format('type', 'eye data'), 'append'));
uimenu(fileMenu,...
    'Text', '&Load',...
    'MenuSelectedFcn', @(h, e)...
        globalHelper(pupl_load('type', 'eye data'), 'append'));
uimenu(fileMenu,...
    'Text', '&Save',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_save('type', 'eye data', 'data', getactiveeyedata)));
uimenu(fileMenu,...
    'Text', '&Remove active datasets',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(deleteData('eye data')));

% Processing menu
processingMenu = uimenu(userInterface, 'Text', '&Process');
uimenu(processingMenu,...
    'Text', '&Moving average filter',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(eyefilter(getactiveeyedata)));
uimenu(processingMenu,...
    'Text', '&Interpolate',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(interpeyedata(getactiveeyedata)));
uimenu(processingMenu,...
    'Text', '&Merge left and right streams',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(mergelr(getactiveeyedata)));

% Epoching menu
trialsMenu = uimenu(userInterface,...
    'Text', '&Trials');
uimenu(trialsMenu,...
    'Text', '&Separate into trials',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(epoch(getactiveeyedata)));
uimenu(trialsMenu,...
    'Text', '&Merge trials',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(binepochs(getactiveeyedata)));
% Event logs sub-menu
eventLogsMenu = uimenu(trialsMenu,...
    'Text', '&Event logs');
uimenu(eventLogsMenu,...
    'Text', '&Write to eye data',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(attachevents(getactiveeyedata, 'eventLogs', geteventlogs)));
uimenu(eventLogsMenu,...
    'Text', '&Import',...
    'Interruptible', 'off',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_format('type', 'event logs')));
uimenu(eventLogsMenu,...
    'Text', '&Load',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_load('type', 'event logs')));
uimenu(eventLogsMenu,...
    'Text', '&Save',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_save('type', 'eye data', 'data', geteventlogs)));

% Experiment menu
experimentMenu = uimenu(userInterface,...
    'Text', '&Experiment');
uimenu(experimentMenu,...
    'Text', '&Assign datasets to conditions',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_condition(getactiveeyedata)));
uimenu(experimentMenu,...
    'Text', '&Merge conditions',...
    'MenuSelectedFcn', @(src, event)...
        globalHelper(pupl_merge(getactiveeyedata)));

% Plotting menu
plottingMenu = uimenu(userInterface,...
    'Text', '&Plot');
uimenu(plottingMenu,...
    'Text', '&Plot continuous',...
    'MenuSelectedFcn', @(src, event)...
        plotcontinuous(getactiveeyedata));
uimenu(plottingMenu,...
    'Text', 'P&lot',...
    'MenuSelectedFcn', @(src, event)...
        pupl_plot(getactiveeyedata));

% Spreadsheet menu
spreadSheetMenu = uimenu(userInterface,...
    'Text', '&Spreadsheet');
uimenu(spreadSheetMenu,...
    'Text', '&Write eye data to spreadsheet',...
    'MenuSelectedFcn', @(src, event)...
        writetospreadsheet(getactiveeyedata));

end

function globalHelper(in, varargin)

global eyeData activeEyeDataIdx eventLogs activeEventLogsIdx

if ~isempty(in)
    dataType = in(1).type;

    if ~isempty(in)
        if strcmp(dataType, 'eye data')
            currStruct = eyeData;
            activeIdx = activeEyeDataIdx;
        elseif strcmp(dataType, 'event logs')
            currStruct = eventLogs;
            activeIdx = activeEventLogsIdx;
        end
        if ~isempty(currStruct)
            % Create empty fields if necessary so that structs can still be in an array
            currStruct = fieldconsistency(currStruct, in);
            if any(strcmpi(varargin, 'append'))
                currStruct = [currStruct in];
            else
                currStruct(activeIdx) = in;
            end
        else
            currStruct = in;
        end
        if strcmp(dataType, 'eye data')
            eyeData = currStruct;
            activeEyeDataIdx = activeIdx;
        elseif strcmp(dataType, 'event logs')
            eventLogs = currStruct;
            activeEventLogsIdx = activeIdx;
        end
    end
end

update_UI

end

function update_UI

% For when new data is loaded or the active datasets change

global userInterface activeEyeDataPanel activeEyeDataIdx eyeData 

if userInterface.UserData.n ~= numel(eyeData)
    userInterface.UserData.n = numel(eyeData);
    delete(activeEyeDataPanel.Children)
    activeEyeDataIdx(numel(activeEyeDataIdx)+1:numel(eyeData)) = true;
    sep = 2;
    buttonHeight = 20;
    bgPos = getpixelposition(activeEyeDataPanel);
    top = bgPos(4) - buttonHeight;
    buttonWidth = bgPos(3) - sep;
    for i = 1:numel(eyeData)
        if activeEyeDataIdx(i)
            value = 1;
        else
            value = 0;
        end
        uicontrol(activeEyeDataPanel,...
            'Style', 'checkbox',...
            'Position', [sep, top - (buttonHeight+sep)*i, buttonWidth, buttonHeight],...
            'String', eyeData(i).name,...
            'Value', value,...
            'FontSize', 10,...
            'Callback', @(h, e) update_UI);
    end
end

for i = 1:numel(activeEyeDataPanel.Children)
    if activeEyeDataPanel.Children(i).Value == 1
        activeEyeDataIdx(i) = true;
    else
        activeEyeDataIdx(i) = false;
    end
end

activeEyeDataIdx = logical(activeEyeDataIdx);

userInterface.Visible = 'off';
userInterface.Visible = 'on';

end

function out = getactiveeyedata

global eyeData activeEyeDataIdx
out = eyeData(activeEyeDataIdx);

end

function out = geteventlogs

global eventLogs activeEventLogsIdx
out = eventLogs(activeEventLogsIdx);

end
