function pupl_UI

% The UI layout is stored in this file

global pupl_globals

pupl_globals.UI = figure('Name', 'PuPl',...
    'NumberTitle', 'off',...
    'UserData', struct(...
        'dataCount', 0,...
        'activeEyeDataIdx', logical([])),...
    'CloseRequestFcn', @savewarning,...
    'MenuBar', 'none',...
    'ToolBar', 'none',...
    'Visible', 'off');
userInterface = pupl_globals.UI;
set(userInterface, 'SizeChangedFcn', @preservelayout);

%% Active recordings

sbw = 0.03; % scrollbar width
oripos = [0 0 1 1];
uibuttongroup(userInterface,...
    'Title', 'Active data',...
    'FontSize', 10,...
    'Tag', 'activeEyeDataPanel',...
    'Units', 'normalized',...
    'Position', oripos,...
    'UserData', struct(...
        'OriginalPos', oripos));
uicontrol('Style','Slider','Parent',1,...
    'Tag', 'dataScroller',...
    'Units', 'normalized',...
    'Position', [1 - sbw 0 sbw 1],...
    'Value', 1,...
    'Callback', @(h, e) scrolldatapanel(h, e));
set(userInterface, 'WindowScrollWheelFcn', @(h, e) scrolldatapanel(h, e));

%% File menu

fileMenu = uimenu(userInterface,...
    'Tag', 'fileMenu',...
    'Label', '&File');
uimenu(fileMenu,...
    'Label', '&Load',...
    'Callback', @(h, e)...
        appendtodata(@() pupl_import('native', true)));
uimenu(fileMenu,...
    'Tag', 'importEyeDataMenu',...
    'Label', '&Import');
uimenu(fileMenu,...
    'Label', '&Save',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        pupl_save(getactivedata));
uimenu(fileMenu,...
    'Label', '&Batch save',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        pupl_save(getactivedata, 'batch', true));
%% BIDS sub-menu
bidsmenu = uimenu(fileMenu,...
    'Label', 'BI&DS');
uimenu(bidsmenu,...
    'Label', '&Load',...
    'Callback', @(src, event)...
        appendtodata(@() pupl_import(...
            'native', true,...
            'bids', true)));
uimenu(bidsmenu,...
    'Tag', 'BIDSimportEyeDataMenu',...
    'Label', '&Import');
uimenu(bidsmenu,...
    'Label', '&Save',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) pupl_BIDS_save(getactivedata));

%% Edit menu

editMenu = uimenu(userInterface,...
    'Label', '&Edit',...
    'UserData', @() (timeline_allowed('any') || (numel(evalin('base', pupl_globals.datavarname)) > 0)));
uimenu(editMenu,...
    'Label', '&Undo',...
    'Tag', 'undo',...
    'UserData', @() timeline_allowed('b'),...
    'Callback', @(src, event)...
        updateglobals('w', @() pupl_timeline('b'), 1, false));
uimenu(editMenu,...
    'Label', '&Redo',...
    'Tag', 'redo',...
    'UserData', @() timeline_allowed('f'),...
    'Callback', @(src, event)...
        updateglobals('w', @() pupl_timeline('f'), 1, false));
uimenu(editMenu,...
    'Label', '&Crop recordings',...
    'Separator', 'on',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) pupl_UI_procwrap(@pupl_crop));
uimenu(editMenu,...
    'Label', '(De)select &all data',...
    'UserData', @() numel(evalin('base', pupl_globals.datavarname)) > 0,...
    'Tag', 'selectAllData',...
    'Callback', @(src, event) selectalldata);
uimenu(editMenu,...
    'Label', '&Duplicate recordings',...
    'UserData', @() numel(evalin('base', pupl_globals.datavarname)) > 0,...
    'Callback', @(h, e)...
        appendtodata(@() pupl_copy(getactivedata)));
uimenu(editMenu,...
    'Label', '&Remove recordings',...
    'UserData', @() numel(evalin('base', pupl_globals.datavarname)) > 0,...
    'Callback', @(src, event) deletedata);

%% Tools menu

toolsMenu = uimenu(userInterface,...
    'Label', '&Tools',...
    'UserData', @() isnonemptyfield(getactivedata));
uimenu(toolsMenu,...
    'Label', 'Save &processing history to script',...
    'Separator', 'on',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) pupl_history('wt'));
uimenu(toolsMenu,...
    'Label', '&Run processing script',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_pipeline(getactivedata)));
uimenu(toolsMenu,...
    'Label', 'R&eload raw data',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_reload(getactivedata)));

%% Preprocessing menu

processingMenu = uimenu(userInterface,...
    'Label', '&Preprocess',...
    'UserData', @() isnonemptyfield(getactivedata));
excludeRecsMenu = uimenu(processingMenu,...
    'Label', 'E&xclude recordings',...
    'UserData', @() isnonemptyfield(getactivedata));
uimenu(excludeRecsMenu,...
    'Label', '&Manually',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) pupl_UI_procwrap({@pupl_rm}, 'method', 'manual'));
uimenu(excludeRecsMenu,...
    'Label', 'By &standard deviation of pupil size',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) pupl_UI_procwrap({@pupl_rm}, 'method', 'std'));
uimenu(excludeRecsMenu,...
    'Label', 'By missing &data',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) pupl_UI_procwrap({@pupl_rm}, 'method', 'missing'));
uimenu(excludeRecsMenu,...
    'Label', 'By &correlation between left and right pupil size',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) pupl_UI_procwrap({@pupl_rm}, 'method', 'corr'));
uimenu(excludeRecsMenu,...
    'Label', 'By percent rejected &epochs',...
    'UserData', @() isnonemptyfield(mergefields(getactivedata, 'epoch')),...
    'Callback', @(src, event) pupl_UI_procwrap({@pupl_rm}, 'method', 'epochs'));
areaDiamConversionMenu = uimenu(processingMenu,...
    'Label', 'Con&vert pupil size',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'));
uimenu(areaDiamConversionMenu,...
    'Label', '&Area to diameter',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_ad_convert, 'to', 'diameter'));
uimenu(areaDiamConversionMenu,...
    'Label', '&Diameter to area',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_ad_convert, 'to', 'area'));
uimenu(processingMenu,...
    'Label', '&Z-score pupil size data',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_zscore));
trimmingMenu = uimenu(processingMenu,...
    'Label', '&Trim data');
uimenu(trimmingMenu,...
    'Label', 'Trim extreme &pupil size measurements',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_trim_pupil));
uimenu(trimmingMenu,...
    'Label', 'Trim extreme &gaze measurements',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_trim_gaze));
uimenu(trimmingMenu,...
    'Label', 'Trim by extreme &dilation speed',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_trim_dilationspeed));
uimenu(trimmingMenu,...
    'Label', 'Trim &isolated samples',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_trim_short));
blinksMenu = uimenu(processingMenu,...
    'Label', '&Blinks',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'));
uimenu(blinksMenu,...
    'Label', 'Identify blinks using pupillometry &noise (Hershman et al., 2019)',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_blink_id, 'method', 'noise'));
uimenu(blinksMenu,...
    'Label', 'Identify blinks by consecutive &missing data',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_blink_id, 'method', 'missing'));
uimenu(blinksMenu,...
    'Label', 'Identify blinks by &velocity profile (Mathôt, 2013)',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_blink_id, 'method', 'velocity'));
uimenu(blinksMenu,...
    'Label', '&Remove blink samples',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_blink_rm));
filterMenu = uimenu(processingMenu,...
    'Label', 'Moving average &filter');
pupilFiltMenu = uimenu(filterMenu,...
    'Label', 'Pupil &size',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'));
uimenu(pupilFiltMenu,...
    'Label', 'Moving &median',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_filt, 'data', 'pupil', 'avfunc', 'median'));
uimenu(pupilFiltMenu,...
    'Label', '&Windowed moving mean',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_filt, 'data', 'pupil', 'avfunc', 'mean'));
gazeFiltMenu = uimenu(filterMenu,...
    'Label', '&Gaze',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'));
uimenu(gazeFiltMenu,...
    'Label', 'Moving &median',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_filt, 'data', 'gaze', 'avfunc', 'median'));
saccadesMenu = uimenu(processingMenu,...
    'Label', '&Saccades (Salvucci et al., 2000)',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'));
uimenu(saccadesMenu,...
    'Label', '&Identify saccades and fixations',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_saccades));
uimenu(saccadesMenu,...
    'Label', 'Map gaze data to fixation &centroids',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_map2fix))

%% PFE sub-menu

PFEmenu = uimenu(processingMenu,...
    'Label', 'Pupil foreshortening &error correction');
uimenu(PFEmenu,...
    'Label', 'Convert ga&ze units from pixels to millimeters/re-reference gaze coordinates',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_px2mm));
uimenu(PFEmenu,...
    'Label', 'Add coordinates of experimental setup',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_PFE_coords));
uimenu(PFEmenu,...
    'Label', '&Geometric PFE correction (Hayes et al., 2015)',...
    'UserData', @() ...
        isnonemptyfield(getactivedata, 'coords', 'left') &...
        isnonemptyfield(getactivedata, 'coords', 'right') &...
        isnonemptyfield(getactivedata, 'coords', 'camera') &...
        isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_PFE_correct));
uimenu(PFEmenu,...
    'Label', '&Linear detrend in gaze y-axis',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil') &...
        isnonemptyfield(getactivedata, 'gaze', 'y'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_PFE_detrend, 'axis', 'y'));
uimenu(PFEmenu,...
    'Label', '&Quadratic detrend in gaze x-axis',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil') &...
        isnonemptyfield(getactivedata, 'gaze', 'x'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_PFE_detrend, 'axis', 'x'));

%% Rest of preprocessing menu
        
interpMenu = uimenu(processingMenu,...
    'Label', '&Interpolate missing data',...
    'UserData', @() isnonemptyfield(getactivedata));
uimenu(interpMenu,...
    'Label', 'Pupil &size',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_interp, 'data', 'pupil'));
uimenu(interpMenu,...
    'Label', '&Gaze',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_interp, 'data', 'gaze'));
uimenu(processingMenu,...
    'Label', '&Average left and right pupil size',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_mergelr));

%% Trials menu

trialsMenu = uimenu(userInterface,...
    'Label', 'T&rials',...
    'UserData', @() isnonemptyfield(getactivedata));

%% Event logs menu

eventLogsMenu = uimenu(trialsMenu,...
    'Label', '&Event logs');
uimenu(eventLogsMenu,...
    'Tag', 'importEventLogsMenu',...
    'Label', '&Import');
uimenu(eventLogsMenu,...
    'Tag', 'BIDSimportEventLogsMenu',...
    'Label', 'Import from &BIDS');
pupl_UI_addimporter(...
    'loadfunc', @tsv2eventlog,...
    'type', 'event',....
    'label', 'From &BIDS-compliant TSV');
syncmenu = uimenu(eventLogsMenu,...
    'Label', '&Synchronize with eye data',...
    'UserData', @() isnonemptyfield(getactivedata, 'eventlog'));
uimenu(syncmenu,...
    'Label', 'By &timestamps',...
    'UserData', @() isnonemptyfield(getactivedata, 'eventlog'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_alignbytimestamp));
uimenu(syncmenu,...
    'Label', 'By shared &events (e.g. sync triggers)',...
    'UserData', @() isnonemptyfield(getactivedata, 'eventlog'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_alignbysync));

%% Misc trial stuff

uimenu(trialsMenu,...
    'Label', 'Define and mark &higher-order/compound events',...
    'UserData', @() isnonemptyfield(getactivedata, 'event'),...
    'Separator', 'on',...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_higherorderevents));
uimenu(trialsMenu,...
    'Label', 'Compute &reaction times',...
    'UserData', @() isnonemptyfield(getactivedata, 'event'),...
    'Separator', 'on',...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_getrt));
uimenu(trialsMenu,...
    'Label', '&Define epochs',...
    'UserData', @() isnonemptyfield(getactivedata, 'event'),...
    'Separator', 'on',...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_epoch));
uimenu(trialsMenu,...
    'Label', '&Baseline correction',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_baseline));
trialRejectionMenu = uimenu(trialsMenu,...
    'Label', 'Epoch &rejection',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'));

%% Rejection sub-menu

uimenu(trialRejectionMenu,...
    'Label', 'Reject by proportion &missing data',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_epoch_reject, 'method', 'ppnmissing'));
uimenu(trialRejectionMenu,...
    'Label', 'Reject by e&xtreme pupil size measurements',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_epoch_reject, 'method', 'extremepupil'));
uimenu(trialRejectionMenu,...
    'Label', 'Reject by &reaction time',...
    'UserData', @() ~all(isnan(mergefields(getactivedata, 'epoch', 'event', 'rt'))),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_epoch_reject, 'method', 'rt'));
uimenu(trialRejectionMenu,...
    'Label', 'Reject by presense of &blinks',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_epoch_reject, 'method', 'blink'));
uimenu(trialRejectionMenu,...
    'Label', '&Un-reject all epochs',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Separator', 'on',...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_epoch_reject, 'method', 'undo'));

%% Rest of trials menu
        
uimenu(trialsMenu,...
    'Label', '&Merge epochs into sets',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_epochset));

%% Plotting menu
plottingMenu = uimenu(userInterface,...
    'Label', 'P&lot',...
    'UserData', @() isnonemptyfield(getactivedata));
scrollMenu = uimenu(plottingMenu,...
    'Label', 'Plot &continuous');
uimenu(scrollMenu,...
    'Label', 'P&upil size',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil', 'left'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @pupl_plot_scroll, 'type', 'pupil'));
uimenu(scrollMenu,...
    'Label', 'Ga&ze',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze', 'x'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @pupl_plot_scroll, 'type', 'gaze'));
uimenu(plottingMenu,...
    'Label', '&Gaze scatterplot',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @pupl_plot_gazescatter));
uimenu(plottingMenu,...
    'Label', '&Pupil size histogram',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @pupl_plot_sizehist));
PFEplotmenu = uimenu(plottingMenu,...
    'Label', 'Pupil &foreshortening error',...
    'UserData', @() isnonemptyfield(getactivedata));
uimenu(PFEplotmenu,...
    'Label', 'Pupil size vs gaze &y',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze', 'y'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @pupl_PFE_detrend_plot, 'y'));
uimenu(PFEplotmenu,...
    'Label', 'Pupil size vs gaze &x',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze', 'x'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @pupl_PFE_detrend_plot, 'x'));
uimenu(PFEplotmenu,...
    'Label', 'Error &surface',...
    'UserData', @() isnonemptyfield(getactivedata, 'pupil', 'left'),...
    'Callback', @(h, e)...
        plotforeach(getactivedata, @pupl_PFE_surface, 'error'));
uimenu(plottingMenu,...
    'Label', 'Plot &epochs',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @pupl_plot_epochs));
plotTrialSetsMenu = uimenu(plottingMenu,...
    'Label', 'Plot epoch &sets',...
    'UserData', @() isnonemptyfield(getactivedata, 'epochset')...
        && isnonemptyfield(getactivedata, 'pupil', 'both'));
uimenu(plotTrialSetsMenu,...
    'Label', '&Line plot with error bars',...
    'Callback', @(src, event)...
        pupl_plot_sets(getactivedata));
uimenu(plotTrialSetsMenu,...
    'Label', '&Grand average by condition',...
    'UserData', @() isnonemptyfield(getactivedata, 'cond'),...
    'Callback', @(src, event)...
        pupl_plot_sets(getactivedata, 'bycond', true));
uimenu(plotTrialSetsMenu,...
    'Label', 'Data &matrix (similar to EEGLAB''s erpimage)',...
    'Callback', @(src, event)...
        pupl_plot_matrix(getactivedata));

%% Experiment menu

experimentmenu = uimenu(userInterface,...
    'Label', 'E&xperiment',...
    'UserData', @() isnonemptyfield(getactivedata));
uimenu(experimentmenu,...
    'Label', '&Assign recordings to conditions',...
    'Callback', @(src, event)...
        pupl_UI_procwrap(@pupl_condition));
uimenu(experimentmenu,...
    'Label', 'Write &statistics to spreadsheet',...
    'UserData', @() isnonemptyfield(getactivedata, 'epochset'),...
    'Callback', @(src, event)...
        pupl_export_new(getactivedata,...
            'which', 'stats'));
uimenu(experimentmenu,...
    'Label', 'E&xport downsampled/binned data',...
    'UserData', @() isnonemptyfield(getactivedata, 'epochset'),...
    'Callback', @(src, event)...
        pupl_export(getactivedata));
uimenu(experimentmenu,...
    'Label', 'Export &undownsampled data',...
    'UserData', @() isnonemptyfield(getactivedata, 'epochset'),...
    'Callback', @(src, event)...
        pupl_export_new(getactivedata,...
            'which', 'downsampled',...
            'cfg', struct(...
                'start', [],...
                'end', [],...
                'width', '1dp',...
                'step', '1dp')));
%% Help menu
helpMenu = uimenu(userInterface,...
    'Label', '&Help');
uimenu(helpMenu,...
    'Label', 'Open PuPl &manual',...
    'Callback', @(src, event)...
        web('github.com/kinleyid/PuPL/blob/master/docs/manual.pdf', '-browser'));
uimenu(helpMenu,...
    'Label', 'What is &BIDS?',...
    'Callback', @(src, event)...
        web('bids.neuroimaging.io/', '-browser'));
uimenu(helpMenu,...
    'Label', 'How can I &convert my data to BIDS?',...
    'Callback', @(src, event)...
        web('pypi.org/project/dastr/', '-browser'));
uimenu(helpMenu,...
    'Label', 'What is &XDF?',...
    'Callback', @(src, event)...
        web('github.com/sccn/xdf/blob/master/README.md', '-browser'));
%% Citations    
citeMenu = uimenu(userInterface,...
    'Label', '&Citations');
uimenu(citeMenu,...
    'Label', 'Hayes et al., 2015',...
    'Callback', @(src, event)...
        web('link.springer.com/article/10.3758/s13428-015-0588-x', '-browser'));
uimenu(citeMenu,...
    'Label', 'Hershman et al., 2019',...
    'Callback', @(src, event)...
        web('link.springer.com/article/10.3758/s13428-018-01190-1', '-browser'));
uimenu(citeMenu,...
    'Label', 'Mathôt, 2013',...
    'Callback', @(src, event)...
        web('researchgate.net/publication/236268543_A_simple_way_to_reconstruct_pupil_size_during_eye_blinks', '-browser'));
uimenu(citeMenu,...
    'Label', 'Salvucci et al., 2000',...
    'Callback', @(src, event)...
        web('dl.acm.org/doi/abs/10.1145/355017.355028', '-browser'));

update_UI;

end

function scrolldatapanel(ignored, eventdata)

dataPanel = findobj('Tag', 'activeEyeDataPanel');
dataScroller = findobj('Tag', 'dataScroller');
originalDataPanelPos = getfield(get(dataPanel, 'UserData'), 'OriginalPos');
if originalDataPanelPos(2) >= 0
    set(dataScroller, 'Value', 1);
else
    if isempty(eventdata) % Octave
        eventdata = struct('EventName', 'action');
    end
    switch lower(eventdata.EventName)
        case 'windowscrollwheel'
            currVert = get(dataScroller, 'Value');
            scroll = eventdata.VerticalScrollCount * eventdata.VerticalScrollAmount;
            newVert = currVert - scroll/100;
            if newVert < 0
                scroll = currVert * 100;
            elseif newVert > 1
                scroll = (currVert - 1) * 100;
            end
            newVert = currVert - scroll/100;
            set(dataScroller, 'Value', newVert);
        case 'action'
            newVert = get(dataScroller, 'Value');
    end
    originalDataPanelPos(2) = newVert * originalDataPanelPos(2);
    set(dataPanel, 'Position', originalDataPanelPos);
end

end

function out = timeline_allowed(direction)

global pupl_globals

idx = find(strcmp(pupl_globals.timeline.data, 'curr'));
out = false;
if ismember(direction, {'forward' 'f' 'any'})
    if idx < numel(pupl_globals.timeline.data)
        out = true;
    end
end
if ismember(direction, {'backward' 'b' 'any'})
    if idx > 1
        out = true;
    end
end
if ismember(direction, {'flush'})
    out = numel(pupl_globals.timeline.data) > 1;
end

end