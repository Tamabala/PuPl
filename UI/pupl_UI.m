function pupl_UI

% The UI layout is stored in this file

global userInterface

userInterface = figure('Name', 'PuPL',...
    'NumberTitle', 'off',...
    'UserData', struct(...
        'dataCount', 0,...
        'activeEyeDataIdx', logical([])),...
    'CloseRequestFcn', @savewarning,...
    'MenuBar', 'none',...
    'ToolBar', 'none',...
    'Visible', 'off');
set(userInterface, 'SizeChangedFcn', @preservelayout);

%% Active datasets

sbw = 0.03;
oripos = [0 0 1 1];
uibuttongroup(userInterface,...
    'Title', 'Active data',...
    'FontSize', 10,...
    'Tag', 'activeEyeDataPanel',...
    'Units', 'normalized',...
    'Position', oripos,...
    'UserData', struct(...
        'OriginalPos', oripos));
uicontrol('Style','Slider','Parent',1,...
    'Tag', 'dataScroller',...
    'Units', 'normalized',...
    'Position', [1 - sbw 0 sbw 1],...
    'Value', 1,...
    'Callback',@(h,e) scrolldatapanel(h,e));
set(userInterface, 'WindowScrollWheelFcn', @(h,e) scrolldatapanel(h,e));

%% File menu

fileMenu = uimenu(userInterface,...
    'Tag', 'fileMenu',...
    'Label', '&File');
uimenu(fileMenu,...
    'Label', '&Load',...
    'Callback', @(h, e)...
        appendtodata(@pupl_load));
uimenu(fileMenu,...
    'Tag', 'importEyeDataMenu',...
    'Label', '&Import');
uimenu(fileMenu,...
    'Label', '&Save',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        @() pupl_save('type', 'eye data', 'data', getactivedata));
uimenu(fileMenu,...
    'Label', '&Batch save',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        @() pupl_save('type', 'eye data', 'data', getactivedata, 'batch', true));
%% BIDS sub-menu
bidsmenu = uimenu(fileMenu,...
    'Label', '&BIDS');
uimenu(bidsmenu,...
    'Label', '&Load sourcedata',...
    'Callback', @(src, event)...
        appendtodata(@loadBIDSsourcedata))
uimenu(bidsmenu,...
    'Label', 'Add BIDS &info',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        updateactivedata(@() addBIDSinfo(getactivedata)));
uimenu(bidsmenu,...
    'Label', 'Run &processing script on sourcedata',...
    'Callback', @(src, event) processBIDSsourcedata);
savebidsmenu = uimenu(bidsmenu,...
    'Label', '&Save',...
    'UserData', @() isnonemptyfield(getactivedata));
uimenu(savebidsmenu,...
    'Label', 'Save &raw from current data',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) writeBIDS(getactivedata, 'types', 'raw'));
uimenu(savebidsmenu,...
    'Label', 'Save &current data as sourcedata',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) writeBIDS(getactivedata, 'types', 'sourcedata-current'));
uimenu(savebidsmenu,...
    'Label', 'Reload raw of current data and save as sourcedata',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) writeBIDS(getactivedata, 'types', 'sourcedata'));
uimenu(savebidsmenu,...
    'Label', 'Save current data as &derivative',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) writeBIDS(getactivedata, 'types', 'derivatives'));

%% Edit menu

editMenu = uimenu(userInterface,...
    'Label', '&Edit',...
    'UserData', @() numel(evalin('base', 'eyeData')) > 0);
uimenu(editMenu,...
    'Label', '(De)select &all data',...
    'Tag', 'selectAllData',...
    'Separator', 'on',...
    'Callback', @(src, event) selectalldata);
uimenu(editMenu,...
    'Label', '&Remove datasets',...
    'Callback', @(src, event) deletedata);

%% Tools menu

toolsMenu = uimenu(userInterface,...
    'Label', '&Tools',...
    'UserData', @() isnonemptyfield(getactivedata));
uimenu(toolsMenu,...
    'Label', 'Save current &processing history as script',...
    'Separator', 'on',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event) pupl_history('wt'));
uimenu(toolsMenu,...
    'Label', '&Run processing script',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_pipeline(getactivedata)));
uimenu(toolsMenu,...
    'Label', 'Revert to unpreprocessed data',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_reverttounprocessed(getactivedata)));
uimenu(toolsMenu,...
    'Label', 'R&eload raw data',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_reloadraw(getactivedata)));

%% Preprocessing menu

processingMenu = uimenu(userInterface,...
    'Label', '&Preprocess',...
    'UserData', @() isnonemptyfield(getactivedata));
areaDiamConversionMenu = uimenu(processingMenu,...
    'Label', 'Con&vert pupil size',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam'));
uimenu(areaDiamConversionMenu,...
    'Label', '&Area to diameter',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam'),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_areadiamconversion(getactivedata, 'diam')));
uimenu(areaDiamConversionMenu,...
    'Label', '&Diameter to area',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam'),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_areadiamconversion(getactivedata, 'area')));
trimmingMenu = uimenu(processingMenu,...
    'Label', '&Trim data');
uimenu(trimmingMenu,...
    'Label', 'Trim extreme &pupil size measurements',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam'),...
    'Callback', @(src, event)...
        updateactivedata(@() trimdiam(getactivedata)))
uimenu(trimmingMenu,...
    'Label', 'Trim extreme &gaze measurements',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        updateactivedata(@() trimgaze(getactivedata)))
uimenu(trimmingMenu,...
    'Label', 'Trim &isolated samples',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam'),...
    'Callback', @(src, event)...
        updateactivedata(@() trimshort(getactivedata)))
uimenu(trimmingMenu,...
    'Label', 'Trim &blink-adjacent samples',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam'),...
    'Callback', @(src, event)...
        updateactivedata(@() trimblinkadjacent(getactivedata)));
filterMenu = uimenu(processingMenu,...
    'Label', 'Moving average &filter');
uimenu(filterMenu,...
    'Label', 'Pupil &diameter',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam'),...
    'Callback', @(src, event)...
        updateactivedata(@() eyefilter(getactivedata, 'dataType', 'Dilation')));
uimenu(filterMenu,...
    'Label', '&Gaze',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        updateactivedata(@() eyefilter(getactivedata, 'dataType', 'Gaze', 'filterType', 'median')));
saccadesMenu = uimenu(processingMenu,...
    'Label', 'Identify &saccades and fixations',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'));
uimenu(saccadesMenu,...
    'Label', '&Velocity threshold',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        updateactivedata(@() velocitythresholdsaccadeID(getactivedata)));
uimenu(saccadesMenu,...
    'Label', '&Dispersion threshold',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        updateactivedata(@() dispersionsaccadeID(getactivedata)));
uimenu(processingMenu,...
    'Label', 'Map gaze data to fixation &centroids',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        updateactivedata(@() maptofixationcentroid(getactivedata)));

%% PFE sub-menu

PFEmenu = uimenu(processingMenu,...
    'Label', 'Pupil foreshortening &error correction');
uimenu(PFEmenu,...
    'Label', 'Convert ga&ze units from pixels to millimeters',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_pxmmconversion(getactivedata)));
uimenu(PFEmenu,...
    'Label', 'Add coordinates of experimental setup',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_addcoords(getactivedata)));
uimenu(PFEmenu,...
    'Label', '&Geometric PFE correction',...
    'UserData', @() ...
        isnonemptyfield(getactivedata, 'coords', 'left') &...
        isnonemptyfield(getactivedata, 'coords', 'right') &...
        isnonemptyfield(getactivedata, 'coords', 'camera') &...
        isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_pfecorrect(getactivedata)));
uimenu(PFEmenu,...
    'Label', '&Linear detrend in gaze y-axis',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam') &...
        isnonemptyfield(getactivedata, 'gaze', 'y'),...
    'Callback', @(src, event)...
        updateactivedata(@() PFEdetrend(getactivedata, 'axis', 'y')));
uimenu(PFEmenu,...
    'Label', '&Quadratic detrend in gaze x-axis',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam') &...
        isnonemptyfield(getactivedata, 'gaze', 'x'),...
    'Callback', @(src, event)...
        updateactivedata(@() PFEdetrend(getactivedata, 'axis', 'x')));

%% Rest of preprocessing menu
        
interpMenu = uimenu(processingMenu,...
    'Label', '&Interpolate missing data',...
    'UserData', @() isnonemptyfield(getactivedata));
uimenu(interpMenu,...
    'Label', 'Pupil &diameter',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam'),...
    'Callback', @(src, event)...
        updateactivedata(@() interpeyedata(getactivedata, 'data', 'diam')));
uimenu(interpMenu,...
    'Label', '&Gaze',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        updateactivedata(@() interpeyedata(getactivedata, 'data', 'gaze')));
uimenu(processingMenu,...
    'Label', '&Merge left and right diameter streams',...
    'UserData', @() isnonemptyfield(getactivedata),...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_mergelr(getactivedata, 'diamlr')));

%% Trials menu

trialsMenu = uimenu(userInterface,...
    'Label', 'T&rials',...
    'UserData', @() isnonemptyfield(getactivedata));

%% Event logs menu

eventLogsMenu = uimenu(trialsMenu,...
    'Label', '&Event logs');
importEventLogsMenu = uimenu(eventLogsMenu,...
    'Tag', 'importEventLogsMenu',...
    'Label', '&Import');
uimenu(importEventLogsMenu,...
    'Label', 'From &BIDS-compliant TSV',...
    'Interruptible', 'off',...
    'Callback', @(h, e)...
        updateactivedata(@() pupl_importraw(...
            'eyedata', getactivedata,...
            'loadfunc', @tsv2eventlog,...
            'type', 'event')));
uimenu(eventLogsMenu,...
    'Label', '&Synchronize with eye data',...
    'UserData', @() isnonemptyfield(getactivedata, 'eventlog'),...
    'Callback', @(src, event)...
        updateactivedata(@() attachevents(getactivedata)));

%% Misc trial stuff

uimenu(trialsMenu,...
    'Label', 'Define and mark &higher-order events',...
    'UserData', @() isnonemptyfield(getactivedata, 'event'),...
    'Separator', 'on',...
    'Callback', @(src, event)...
        updateactivedata(@() definehigherorderevents(getactivedata)));
uimenu(trialsMenu,...
    'Label', 'Compute &reaction times',...
    'UserData', @() isnonemptyfield(getactivedata, 'event'),...
    'Separator', 'on',...
    'Callback', @(src, event)...
        updateactivedata(@() computereactiontimes(getactivedata)));
uimenu(trialsMenu,...
    'Label', '&Fragment continuous data into trials',...
    'UserData', @() isnonemptyfield(getactivedata, 'event'),...
    'Separator', 'on',...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_epoch(getactivedata)));
uimenu(trialsMenu,...
    'Label', '&Baseline correction',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        updateactivedata(@() baselinecorrection(getactivedata)));
trialRejectionMenu = uimenu(trialsMenu,...
    'Label', 'Trial &rejection',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'));

%% Rejection sub-menu

uimenu(trialRejectionMenu,...
    'Label', 'Reject by proportion &missing data',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        updateactivedata(@() rejecttrialsbymissingppn(getactivedata, 'lims', 'none')));
uimenu(trialRejectionMenu,...
    'Label', 'Reject by proportion missing data within &window',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        updateactivedata(@() rejecttrialsbymissingppn(getactivedata)));
uimenu(trialRejectionMenu,...
    'Label', 'Reject by e&xtreme diameter measurements',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        updateactivedata(@() rejecttrialsbyextremediam(getactivedata)));
uimenu(trialRejectionMenu,...
    'Label', 'Reject by &reaction time',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        updateactivedata(@() rejecttrialsbyrt(getactivedata)));
uimenu(trialRejectionMenu,...
    'Label', '&Un-reject all trials',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Separator', 'on',...
    'Callback', @(src, event)...
        updateactivedata(@() unreject(getactivedata)));

%% Rest of trials menu
        
uimenu(trialsMenu,...
    'Label', '&Merge trials into sets',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        updateactivedata(@() createtrialsets(getactivedata)));

%% Plotting menu
plottingMenu = uimenu(userInterface,...
    'Label', 'P&lot',...
    'UserData', @() isnonemptyfield(getactivedata));
scrollMenu = uimenu(plottingMenu,...
    'Label', 'Plot &continuous');
uimenu(scrollMenu,...
    'Label', 'P&upil size',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam', 'left'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @scrollplot, 'type', 'diam'));
uimenu(scrollMenu,...
    'Label', 'Ga&ze',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze', 'x'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @scrollplot, 'type', 'gaze'));
uimenu(plottingMenu,...
    'Label', '&Gaze scatterplot',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @gazescatter));
uimenu(plottingMenu,...
    'Label', '&Pupil diameter histogram',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @pupilsizehist));
PFEplotmenu = uimenu(plottingMenu,...
    'Label', 'Pupil &foreshortening error',...
    'UserData', @() isnonemptyfield(getactivedata));
uimenu(PFEplotmenu,...
    'Label', 'Pupil size vs gaze &y',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze', 'y'),...
    'Callback', @(src, event)...
        PFEdetrend(getactivedata, 'axis', 'y', 'vis', 'yes', 'proc', 'no'));
uimenu(PFEplotmenu,...
    'Label', 'Pupil size vs gaze &x',...
    'UserData', @() isnonemptyfield(getactivedata, 'gaze', 'y'),...
    'Callback', @(src, event)...
        PFEdetrend(getactivedata, 'axis', 'x', 'vis', 'yes', 'proc', 'no'));
uimenu(PFEplotmenu,...
    'Label', 'Error &surface',...
    'UserData', @() isnonemptyfield(getactivedata, 'diam', 'left'),...
    'Callback', @(h, e)...
        plotforeach(getactivedata, @PFEplot, 'error'));
uimenu(plottingMenu,...
    'Label', 'Plot &trials',...
    'UserData', @() isnonemptyfield(getactivedata, 'epoch'),...
    'Callback', @(src, event)...
        plotforeach(getactivedata, @plottrials));
plotTrialSetsMenu = uimenu(plottingMenu,...
    'Label', 'Plot trial &sets',...
    'UserData', @() isnonemptyfield(getactivedata, 'trialset')...
        && isnonemptyfield(getactivedata, 'diam', 'both'));
uimenu(plotTrialSetsMenu,...
    'Label', '&Line plot with error bars',...
    'Callback', @(src, event)...
        plottrialaverages(getactivedata));
uimenu(plotTrialSetsMenu,...
    'Label', '&Grand average by condition',...
    'UserData', @() isnonemptyfield(getactivedata, 'cond'),...
    'Callback', @(src, event)...
        plottrialaverages(getactivedata, 'bycond', true));
uimenu(plotTrialSetsMenu,...
    'Label', '&Heatmap (similar to EEGLAB''s erpimage)',...
    'Callback', @(src, event)...
        eyeheatmap(getactivedata));

%% Experiment menu

experimentmenu = uimenu(userInterface,...
    'Label', 'E&xperiment',...
    'UserData', @() isnonemptyfield(getactivedata));
uimenu(experimentmenu,...
    'Label', '&Assign recordings to conditions',...
    'Callback', @(src, event)...
        updateactivedata(@() pupl_condition(getactivedata)));
uimenu(experimentmenu,...
    'Label', 'Write &statistics to spreadsheet',...
    'UserData', @() isnonemptyfield(getactivedata, 'trialset'),...
    'Callback', @(src, event)...
        pupl_stats(getactivedata));
uimenu(experimentmenu,...
    'Label', 'E&xport downsampled/binned data',...
    'UserData', @() isnonemptyfield(getactivedata, 'trialset'),...
    'Callback', @(src, event)...
        pupl_exportbinned(getactivedata));
uimenu(experimentmenu,...
    'Label', 'Export &undownsampled data',...
    'UserData', @() isnonemptyfield(getactivedata, 'trialset'),...
    'Callback', @(src, event)...
        pupl_exportundownsampled(getactivedata));

helpMenu = uimenu(userInterface,...
    'Label', '&Help');
uimenu(helpMenu,...
    'Label', 'Open &manual',...
    'Callback', @(src, event)...
        web('https://github.com/kinleyid/PuPL/blob/master/docs/manual.pdf', '-browser'));

update_UI;

end

function scrolldatapanel(ignored, eventdata)

dataPanel = findobj('Tag', 'activeEyeDataPanel');
dataScroller = findobj('Tag', 'dataScroller');
originalDataPanelPos = getfield(get(dataPanel, 'UserData'), 'OriginalPos');
if originalDataPanelPos(2) >= 0
    set(dataScroller, 'Value', 1);
else
    if isempty(eventdata) % Octave
        eventdata = struct('EventName', 'action');
    end
    switch lower(eventdata.EventName)
        case 'windowscrollwheel'
            currVert = get(dataScroller, 'Value');
            scroll = eventdata.VerticalScrollCount * eventdata.VerticalScrollAmount;
            newVert = currVert - scroll/100;
            if newVert < 0
                scroll = currVert * 100;
            elseif newVert > 1
                scroll = (currVert - 1) * 100;
            end
            newVert = currVert - scroll/100;
            set(dataScroller, 'Value', newVert);
        case 'action'
            newVert = get(dataScroller, 'Value');
    end
    originalDataPanelPos(2) = newVert * originalDataPanelPos(2);
    set(dataPanel, 'Position', originalDataPanelPos);
end

end