
function setdescriptions = UI_getsets(varargin)

% First arg is the names of potential members
% Second arg is the name used to refer to sets (default "set", use singular)

options = varargin{1};
try
    setsname = varargin{2};
catch
    setsname = 'set';
end
try
    replacement = varargin{3};
catch
    replacement = true;
end

f = figure(...
    'MenuBar', 'none',...
    'ToolBar', 'none',...
    'NumberTitle', 'off',...
    'Name', sprintf('Create %ss', setsname),...
    'UserData', struct(...
        'setDescriptions', struct([]),...
        'setsname', setsname));
%% Left panel
createBinsPanel = uipanel(f,...
    'Tag', 'createBinsPanel',...
    'Title', sprintf('Create new %s', setsname),...
    'TitlePosition', 'centertop',...
    'Units', 'Normalized',...
    'Position', [0.01 0.01 0.58 0.98]);
binNamePanel = uipanel(createBinsPanel,...
    'Units', 'Normalized',...
    'Title', sprintf('Name of new %s', setsname),...
    'Units', 'normalized',...
    'Position', [0.01 0.91 0.98 0.08]);
uicontrol(binNamePanel,...
    'Style', 'edit',...
    'String', sprintf('%s 1', setsname),...
    'Tag', 'binName',...
    'FontSize', 10,...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.98 0.98])
createBinsSubPanel = uipanel(createBinsPanel,...
    'Units', 'normalized',...
    'Title', 'Members',...
    'Position', [0.01 0.11 0.98 0.78]);
listboxregexp(createBinsSubPanel, options);
tt = 'The difference between using the highlighted options and using the current regexp (regular expression) is how the operation gets logged in the processing history. If you don''t plan on exporting the processing history to a script, the two options are equivalent';
uicontrol(createBinsPanel,...
    'Tooltip', tt,...
    'Style', 'pushbutton',...
    'String', 'Use highlighted',...
    'Callback', @(h, e) createbin(h, e, false),...
    'KeyPressFcn', @(h, e) ifkeydo(e, 'return', @() createbin(h, e, false)),...
    'FontSize', 10,...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.48 0.08]);
uicontrol(createBinsPanel,...
    'Tooltip', tt,...
    'Style', 'pushbutton',...
    'String', 'Use regexp',...
    'Callback', @(h, e) createbin(h, e, true),...
    'KeyPressFcn', @(h, e) ifkeydo(e, 'return', @() createbin(h, e, true)),...
    'FontSize', 10,...
    'Units', 'normalized',...
    'Position', [0.51 0.01 0.48 0.08]);
%% Right panel
binControlPanel = uipanel(f,...
    'Tag', 'binControlPanel',...
    'Units', 'Normalized',...
    'Title', sprintf('Existing %ss', setsname),...
    'TitlePosition', 'centertop',...
    'Position', [0.61 0.01 0.38 0.98]);
uicontrol(binControlPanel,...
    'Style', 'listbox',...
    'Tag', 'setsBox',...
    'Max', inf,...
    'Units', 'normalized',...
    'KeyPressFcn', @(h,e)ifkeydo(e,'delete',@deletebins),...
    'Position', [0.01 0.21 0.98 0.78])
uicontrol(binControlPanel,...
    'Style', 'pushbutton',...
    'String', sprintf('Delete selected %ss', setsname),...
    'Callback', @deletebins,...
    'KeyPressFcn', @(h,e)ifkeydo(e, 'return' ,@deletebins),...
    'FontSize', 10,...
    'Units', 'normalized',...
    'Position', [0.01 0.11 0.98 0.08])
uicontrol(binControlPanel,...
    'Style', 'pushbutton',...
    'String', 'Done',...
    'Callback', @(h,e)uiresume(f),...
    'KeyPressFcn', @(h,e)ifkeydo(e,'return',@()uiresume(f)),...
    'FontSize', 10,...
    'Units', 'normalized',...
    'Position', [0.01 0.01 0.48 0.08])
uicontrol(binControlPanel,...
    'Style', 'pushbutton',...
    'String', 'Cancel',...
    'Callback', @(h,e)delete(f),...
    'KeyPressFcn', @(h,e)ifkeydo(e,'return',@()delete(f)),...
    'FontSize', 10,...
    'Units', 'normalized',...
    'Position', [0.51 0.01 0.48 0.08])
%%
uicontrol(findobj(f, 'Tag', 'binName'));
uiwait(f);
if isgraphics(f)
    setdescriptions = getfield(get(f, 'UserData'), 'setDescriptions');
    close(f);
else
    setdescriptions = [];
end

end
%%
function createbin(h, e, useregexp)

f = gcbf;
UserData = get(f, 'UserData');
listbox = findobj(get(h, 'Parent'), 'Style', 'listbox');
% Append to existing sets on UI
existingSets = findobj(f, 'Tag', 'setsBox');
priorBinsValue = get(existingSets, 'Value');
binName = findobj(f, 'Tag', 'binName');
set(existingSets, 'String', [get(existingSets, 'String'); cellstr(get(binName, 'String'))]);

% Append to set descriptions
listboxcontents = get(listbox, 'String');
if useregexp
    newset = struct(...
        'name', get(binName, 'String'),...
        'members', {{1 (get(findobj('Tag', 'regexp'), 'String'))}});
else
    newset = struct(...
        'name', get(binName, 'String'),...
        'members', {listboxcontents(get(listbox, 'Value'))});
end
UserData.setDescriptions = cat(2, UserData.setDescriptions, newset);  

updatename(f, UserData);
% set(binName, 'String', sprintf('New %s', UserData.setsname));
set(existingSets, 'Value', priorBinsValue);
set(listbox, 'Value', []);

uicontrol(findobj(f, 'Tag', 'binName'));

set(f, 'UserData', UserData);

end

function deletebins(varargin)

f = gcbf;
bins = findobj(f, 'Tag', 'setsBox');
UserData = get(f, 'UserData');
UserData.setDescriptions(get(bins, 'Value')) = [];
String = get(bins, 'String');
String(get(bins, 'Value')) = [];
binName = findobj(f, 'Tag', 'binName');
if ~isempty(sscanf(get(binName, 'String'), sprintf('%s %%d', UserData.setsname)))
    updatename(f, UserData);
end
set(bins, 'String', String);
set(bins, 'Value', []);
set(f, 'UserData', UserData);

end

function updatename(f, UserData)

nBins = numel(UserData.setDescriptions);
binName = findobj(f, 'Tag', 'binName');
set(binName, 'String', sprintf('%s %d', UserData.setsname, nBins + 1));

end

function ifkeydo(e, key, fn)

switch e.Key
    case key
        feval(fn);
end

end